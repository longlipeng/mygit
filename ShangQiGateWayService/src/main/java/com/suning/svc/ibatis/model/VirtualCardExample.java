package com.suning.svc.ibatis.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VirtualCardExample {

    /**
     * This field was generated by Abator for iBATIS. This field corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    protected String orderByClause;
    /**
     * This field was generated by Abator for iBATIS. This field corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    protected List oredCriteria;

    /**
     * This method was generated by Abator for iBATIS. This method corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    public VirtualCardExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Abator for iBATIS. This method corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    protected VirtualCardExample(VirtualCardExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS. This method corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS. This method corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Abator for iBATIS. This method corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Abator for iBATIS. This method corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Abator for iBATIS. This method corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS. This method corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Abator for iBATIS. This method corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Abator for iBATIS. This class corresponds to the database table CP_VIRTUAL_CARD
     * 
     * @abatorgenerated Tue Nov 05 22:32:09 CST 2013
     */
    public static class Criteria {
        protected List criteriaWithoutValue;
        protected List criteriaWithSingleValue;
        protected List criteriaWithListValue;
        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0
                    || criteriaWithListValue.size() > 0 || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("ID =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("ID <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("ID >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("ID >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("ID <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("ID <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("ID in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("ID not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("ID between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("ID not between", value1, value2, "id");
            return this;
        }

        public Criteria andBatchIdIsNull() {
            addCriterion("BATCH_ID is null");
            return this;
        }

        public Criteria andBatchIdIsNotNull() {
            addCriterion("BATCH_ID is not null");
            return this;
        }

        public Criteria andBatchIdEqualTo(Long value) {
            addCriterion("BATCH_ID =", value, "batchId");
            return this;
        }

        public Criteria andBatchIdNotEqualTo(Long value) {
            addCriterion("BATCH_ID <>", value, "batchId");
            return this;
        }

        public Criteria andBatchIdGreaterThan(Long value) {
            addCriterion("BATCH_ID >", value, "batchId");
            return this;
        }

        public Criteria andBatchIdGreaterThanOrEqualTo(Long value) {
            addCriterion("BATCH_ID >=", value, "batchId");
            return this;
        }

        public Criteria andBatchIdLessThan(Long value) {
            addCriterion("BATCH_ID <", value, "batchId");
            return this;
        }

        public Criteria andBatchIdLessThanOrEqualTo(Long value) {
            addCriterion("BATCH_ID <=", value, "batchId");
            return this;
        }

        public Criteria andBatchIdIn(List values) {
            addCriterion("BATCH_ID in", values, "batchId");
            return this;
        }

        public Criteria andBatchIdNotIn(List values) {
            addCriterion("BATCH_ID not in", values, "batchId");
            return this;
        }

        public Criteria andBatchIdBetween(Long value1, Long value2) {
            addCriterion("BATCH_ID between", value1, value2, "batchId");
            return this;
        }

        public Criteria andBatchIdNotBetween(Long value1, Long value2) {
            addCriterion("BATCH_ID not between", value1, value2, "batchId");
            return this;
        }

        public Criteria andProductIdIsNull() {
            addCriterion("PRODUCT_ID is null");
            return this;
        }

        public Criteria andProductIdIsNotNull() {
            addCriterion("PRODUCT_ID is not null");
            return this;
        }

        public Criteria andProductIdEqualTo(Long value) {
            addCriterion("PRODUCT_ID =", value, "productId");
            return this;
        }

        public Criteria andProductIdNotEqualTo(Long value) {
            addCriterion("PRODUCT_ID <>", value, "productId");
            return this;
        }

        public Criteria andProductIdGreaterThan(Long value) {
            addCriterion("PRODUCT_ID >", value, "productId");
            return this;
        }

        public Criteria andProductIdGreaterThanOrEqualTo(Long value) {
            addCriterion("PRODUCT_ID >=", value, "productId");
            return this;
        }

        public Criteria andProductIdLessThan(Long value) {
            addCriterion("PRODUCT_ID <", value, "productId");
            return this;
        }

        public Criteria andProductIdLessThanOrEqualTo(Long value) {
            addCriterion("PRODUCT_ID <=", value, "productId");
            return this;
        }

        public Criteria andProductIdIn(List values) {
            addCriterion("PRODUCT_ID in", values, "productId");
            return this;
        }

        public Criteria andProductIdNotIn(List values) {
            addCriterion("PRODUCT_ID not in", values, "productId");
            return this;
        }

        public Criteria andProductIdBetween(Long value1, Long value2) {
            addCriterion("PRODUCT_ID between", value1, value2, "productId");
            return this;
        }

        public Criteria andProductIdNotBetween(Long value1, Long value2) {
            addCriterion("PRODUCT_ID not between", value1, value2, "productId");
            return this;
        }

        public Criteria andCardNoIsNull() {
            addCriterion("CARD_NO is null");
            return this;
        }

        public Criteria andCardNoIsNotNull() {
            addCriterion("CARD_NO is not null");
            return this;
        }

        public Criteria andCardNoEqualTo(String value) {
            addCriterion("CARD_NO =", value, "cardNo");
            return this;
        }

        public Criteria andCardNoNotEqualTo(String value) {
            addCriterion("CARD_NO <>", value, "cardNo");
            return this;
        }

        public Criteria andCardNoGreaterThan(String value) {
            addCriterion("CARD_NO >", value, "cardNo");
            return this;
        }

        public Criteria andCardNoGreaterThanOrEqualTo(String value) {
            addCriterion("CARD_NO >=", value, "cardNo");
            return this;
        }

        public Criteria andCardNoLessThan(String value) {
            addCriterion("CARD_NO <", value, "cardNo");
            return this;
        }

        public Criteria andCardNoLessThanOrEqualTo(String value) {
            addCriterion("CARD_NO <=", value, "cardNo");
            return this;
        }

        public Criteria andCardNoLike(String value) {
            addCriterion("CARD_NO like", value, "cardNo");
            return this;
        }

        public Criteria andCardNoNotLike(String value) {
            addCriterion("CARD_NO not like", value, "cardNo");
            return this;
        }

        public Criteria andCardNoIn(List values) {
            addCriterion("CARD_NO in", values, "cardNo");
            return this;
        }

        public Criteria andCardNoNotIn(List values) {
            addCriterion("CARD_NO not in", values, "cardNo");
            return this;
        }

        public Criteria andCardNoBetween(String value1, String value2) {
            addCriterion("CARD_NO between", value1, value2, "cardNo");
            return this;
        }

        public Criteria andCardNoNotBetween(String value1, String value2) {
            addCriterion("CARD_NO not between", value1, value2, "cardNo");
            return this;
        }

        public Criteria andCouponNoIsNull() {
            addCriterion("COUPON_NO is null");
            return this;
        }

        public Criteria andCouponNoIsNotNull() {
            addCriterion("COUPON_NO is not null");
            return this;
        }

        public Criteria andCouponNoEqualTo(String value) {
            addCriterion("COUPON_NO =", value, "couponNo");
            return this;
        }

        public Criteria andCouponNoNotEqualTo(String value) {
            addCriterion("COUPON_NO <>", value, "couponNo");
            return this;
        }

        public Criteria andCouponNoGreaterThan(String value) {
            addCriterion("COUPON_NO >", value, "couponNo");
            return this;
        }

        public Criteria andCouponNoGreaterThanOrEqualTo(String value) {
            addCriterion("COUPON_NO >=", value, "couponNo");
            return this;
        }

        public Criteria andCouponNoLessThan(String value) {
            addCriterion("COUPON_NO <", value, "couponNo");
            return this;
        }

        public Criteria andCouponNoLessThanOrEqualTo(String value) {
            addCriterion("COUPON_NO <=", value, "couponNo");
            return this;
        }

        public Criteria andCouponNoLike(String value) {
            addCriterion("COUPON_NO like", value, "couponNo");
            return this;
        }

        public Criteria andCouponNoNotLike(String value) {
            addCriterion("COUPON_NO not like", value, "couponNo");
            return this;
        }

        public Criteria andCouponNoIn(List values) {
            addCriterion("COUPON_NO in", values, "couponNo");
            return this;
        }

        public Criteria andCouponNoNotIn(List values) {
            addCriterion("COUPON_NO not in", values, "couponNo");
            return this;
        }

        public Criteria andCouponNoBetween(String value1, String value2) {
            addCriterion("COUPON_NO between", value1, value2, "couponNo");
            return this;
        }

        public Criteria andCouponNoNotBetween(String value1, String value2) {
            addCriterion("COUPON_NO not between", value1, value2, "couponNo");
            return this;
        }

        public Criteria andFatherEntityIdIsNull() {
            addCriterion("FATHER_ENTITY_ID is null");
            return this;
        }

        public Criteria andFatherEntityIdIsNotNull() {
            addCriterion("FATHER_ENTITY_ID is not null");
            return this;
        }

        public Criteria andFatherEntityIdEqualTo(String value) {
            addCriterion("FATHER_ENTITY_ID =", value, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdNotEqualTo(String value) {
            addCriterion("FATHER_ENTITY_ID <>", value, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdGreaterThan(String value) {
            addCriterion("FATHER_ENTITY_ID >", value, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdGreaterThanOrEqualTo(String value) {
            addCriterion("FATHER_ENTITY_ID >=", value, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdLessThan(String value) {
            addCriterion("FATHER_ENTITY_ID <", value, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdLessThanOrEqualTo(String value) {
            addCriterion("FATHER_ENTITY_ID <=", value, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdLike(String value) {
            addCriterion("FATHER_ENTITY_ID like", value, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdNotLike(String value) {
            addCriterion("FATHER_ENTITY_ID not like", value, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdIn(List values) {
            addCriterion("FATHER_ENTITY_ID in", values, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdNotIn(List values) {
            addCriterion("FATHER_ENTITY_ID not in", values, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdBetween(String value1, String value2) {
            addCriterion("FATHER_ENTITY_ID between", value1, value2, "fatherEntityId");
            return this;
        }

        public Criteria andFatherEntityIdNotBetween(String value1, String value2) {
            addCriterion("FATHER_ENTITY_ID not between", value1, value2, "fatherEntityId");
            return this;
        }

        public Criteria andFaceValueIsNull() {
            addCriterion("FACE_VALUE is null");
            return this;
        }

        public Criteria andFaceValueIsNotNull() {
            addCriterion("FACE_VALUE is not null");
            return this;
        }

        public Criteria andFaceValueEqualTo(Long value) {
            addCriterion("FACE_VALUE =", value, "faceValue");
            return this;
        }

        public Criteria andFaceValueNotEqualTo(Long value) {
            addCriterion("FACE_VALUE <>", value, "faceValue");
            return this;
        }

        public Criteria andFaceValueGreaterThan(Long value) {
            addCriterion("FACE_VALUE >", value, "faceValue");
            return this;
        }

        public Criteria andFaceValueGreaterThanOrEqualTo(Long value) {
            addCriterion("FACE_VALUE >=", value, "faceValue");
            return this;
        }

        public Criteria andFaceValueLessThan(Long value) {
            addCriterion("FACE_VALUE <", value, "faceValue");
            return this;
        }

        public Criteria andFaceValueLessThanOrEqualTo(Long value) {
            addCriterion("FACE_VALUE <=", value, "faceValue");
            return this;
        }

        public Criteria andFaceValueIn(List values) {
            addCriterion("FACE_VALUE in", values, "faceValue");
            return this;
        }

        public Criteria andFaceValueNotIn(List values) {
            addCriterion("FACE_VALUE not in", values, "faceValue");
            return this;
        }

        public Criteria andFaceValueBetween(Long value1, Long value2) {
            addCriterion("FACE_VALUE between", value1, value2, "faceValue");
            return this;
        }

        public Criteria andFaceValueNotBetween(Long value1, Long value2) {
            addCriterion("FACE_VALUE not between", value1, value2, "faceValue");
            return this;
        }

        public Criteria andAvailableBalanceIsNull() {
            addCriterion("AVAILABLE_BALANCE is null");
            return this;
        }

        public Criteria andAvailableBalanceIsNotNull() {
            addCriterion("AVAILABLE_BALANCE is not null");
            return this;
        }

        public Criteria andAvailableBalanceEqualTo(Long value) {
            addCriterion("AVAILABLE_BALANCE =", value, "availableBalance");
            return this;
        }

        public Criteria andAvailableBalanceNotEqualTo(Long value) {
            addCriterion("AVAILABLE_BALANCE <>", value, "availableBalance");
            return this;
        }

        public Criteria andAvailableBalanceGreaterThan(Long value) {
            addCriterion("AVAILABLE_BALANCE >", value, "availableBalance");
            return this;
        }

        public Criteria andAvailableBalanceGreaterThanOrEqualTo(Long value) {
            addCriterion("AVAILABLE_BALANCE >=", value, "availableBalance");
            return this;
        }

        public Criteria andAvailableBalanceLessThan(Long value) {
            addCriterion("AVAILABLE_BALANCE <", value, "availableBalance");
            return this;
        }

        public Criteria andAvailableBalanceLessThanOrEqualTo(Long value) {
            addCriterion("AVAILABLE_BALANCE <=", value, "availableBalance");
            return this;
        }

        public Criteria andAvailableBalanceIn(List values) {
            addCriterion("AVAILABLE_BALANCE in", values, "availableBalance");
            return this;
        }

        public Criteria andAvailableBalanceNotIn(List values) {
            addCriterion("AVAILABLE_BALANCE not in", values, "availableBalance");
            return this;
        }

        public Criteria andAvailableBalanceBetween(Long value1, Long value2) {
            addCriterion("AVAILABLE_BALANCE between", value1, value2, "availableBalance");
            return this;
        }

        public Criteria andAvailableBalanceNotBetween(Long value1, Long value2) {
            addCriterion("AVAILABLE_BALANCE not between", value1, value2, "availableBalance");
            return this;
        }

        public Criteria andStatusIsNull() {
            addCriterion("STATUS is null");
            return this;
        }

        public Criteria andStatusIsNotNull() {
            addCriterion("STATUS is not null");
            return this;
        }

        public Criteria andStatusEqualTo(String value) {
            addCriterion("STATUS =", value, "status");
            return this;
        }

        public Criteria andStatusNotEqualTo(String value) {
            addCriterion("STATUS <>", value, "status");
            return this;
        }

        public Criteria andStatusGreaterThan(String value) {
            addCriterion("STATUS >", value, "status");
            return this;
        }

        public Criteria andStatusGreaterThanOrEqualTo(String value) {
            addCriterion("STATUS >=", value, "status");
            return this;
        }

        public Criteria andStatusLessThan(String value) {
            addCriterion("STATUS <", value, "status");
            return this;
        }

        public Criteria andStatusLessThanOrEqualTo(String value) {
            addCriterion("STATUS <=", value, "status");
            return this;
        }

        public Criteria andStatusLike(String value) {
            addCriterion("STATUS like", value, "status");
            return this;
        }

        public Criteria andStatusNotLike(String value) {
            addCriterion("STATUS not like", value, "status");
            return this;
        }

        public Criteria andStatusIn(List values) {
            addCriterion("STATUS in", values, "status");
            return this;
        }

        public Criteria andStatusNotIn(List values) {
            addCriterion("STATUS not in", values, "status");
            return this;
        }

        public Criteria andStatusBetween(String value1, String value2) {
            addCriterion("STATUS between", value1, value2, "status");
            return this;
        }

        public Criteria andStatusNotBetween(String value1, String value2) {
            addCriterion("STATUS not between", value1, value2, "status");
            return this;
        }

        public Criteria andCreatedTimeIsNull() {
            addCriterion("CREATED_TIME is null");
            return this;
        }

        public Criteria andCreatedTimeIsNotNull() {
            addCriterion("CREATED_TIME is not null");
            return this;
        }

        public Criteria andCreatedTimeEqualTo(Date value) {
            addCriterion("CREATED_TIME =", value, "createdTime");
            return this;
        }

        public Criteria andCreatedTimeNotEqualTo(Date value) {
            addCriterion("CREATED_TIME <>", value, "createdTime");
            return this;
        }

        public Criteria andCreatedTimeGreaterThan(Date value) {
            addCriterion("CREATED_TIME >", value, "createdTime");
            return this;
        }

        public Criteria andCreatedTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("CREATED_TIME >=", value, "createdTime");
            return this;
        }

        public Criteria andCreatedTimeLessThan(Date value) {
            addCriterion("CREATED_TIME <", value, "createdTime");
            return this;
        }

        public Criteria andCreatedTimeLessThanOrEqualTo(Date value) {
            addCriterion("CREATED_TIME <=", value, "createdTime");
            return this;
        }

        public Criteria andCreatedTimeIn(List values) {
            addCriterion("CREATED_TIME in", values, "createdTime");
            return this;
        }

        public Criteria andCreatedTimeNotIn(List values) {
            addCriterion("CREATED_TIME not in", values, "createdTime");
            return this;
        }

        public Criteria andCreatedTimeBetween(Date value1, Date value2) {
            addCriterion("CREATED_TIME between", value1, value2, "createdTime");
            return this;
        }

        public Criteria andCreatedTimeNotBetween(Date value1, Date value2) {
            addCriterion("CREATED_TIME not between", value1, value2, "createdTime");
            return this;
        }

        public Criteria andUpdatedTimeIsNull() {
            addCriterion("UPDATED_TIME is null");
            return this;
        }

        public Criteria andUpdatedTimeIsNotNull() {
            addCriterion("UPDATED_TIME is not null");
            return this;
        }

        public Criteria andUpdatedTimeEqualTo(Date value) {
            addCriterion("UPDATED_TIME =", value, "updatedTime");
            return this;
        }

        public Criteria andUpdatedTimeNotEqualTo(Date value) {
            addCriterion("UPDATED_TIME <>", value, "updatedTime");
            return this;
        }

        public Criteria andUpdatedTimeGreaterThan(Date value) {
            addCriterion("UPDATED_TIME >", value, "updatedTime");
            return this;
        }

        public Criteria andUpdatedTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("UPDATED_TIME >=", value, "updatedTime");
            return this;
        }

        public Criteria andUpdatedTimeLessThan(Date value) {
            addCriterion("UPDATED_TIME <", value, "updatedTime");
            return this;
        }

        public Criteria andUpdatedTimeLessThanOrEqualTo(Date value) {
            addCriterion("UPDATED_TIME <=", value, "updatedTime");
            return this;
        }

        public Criteria andUpdatedTimeIn(List values) {
            addCriterion("UPDATED_TIME in", values, "updatedTime");
            return this;
        }

        public Criteria andUpdatedTimeNotIn(List values) {
            addCriterion("UPDATED_TIME not in", values, "updatedTime");
            return this;
        }

        public Criteria andUpdatedTimeBetween(Date value1, Date value2) {
            addCriterion("UPDATED_TIME between", value1, value2, "updatedTime");
            return this;
        }

        public Criteria andUpdatedTimeNotBetween(Date value1, Date value2) {
            addCriterion("UPDATED_TIME not between", value1, value2, "updatedTime");
            return this;
        }
    }
}