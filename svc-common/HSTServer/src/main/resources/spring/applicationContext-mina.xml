<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"
	default-autowire="byName">

	  <!-- This makes it possible to specify java.net.SocketAddress values 
    (e.g. :1234 below) as Strings.
    They will be converted into java.net.InetSocketAddress objects by Spring.  -->
  <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
    <property name="customEditors">
      <map>
        <entry key="java.net.SocketAddress">
          <bean class="org.apache.mina.integration.beans.InetSocketAddressEditor" />
        </entry>
      </map>
    </property>
  </bean>
  
  
  <!-- 线程池过滤器，提供高性能的并发处理 -->
  <bean id="executorFilter" class="org.apache.mina.filter.executor.ExecutorFilter">
   <constructor-arg>
      <bean class="org.apache.mina.filter.executor.OrderedThreadPoolExecutor" >
  	  	<property name="maximumPoolSize" value="100"/>
  	  	<property name="corePoolSize" value="20"/>
    </bean>
    </constructor-arg>
  </bean>

  <!-- 成帧协议过滤器，本过滤器以长度域作为成帧依据，支持各种长度域长度和三种长度域类型，详细说明见具体配置项-->
  <bean id="huatengcodecFilter" class="org.apache.mina.filter.codec.ProtocolCodecFilter">
    <constructor-arg>
      <bean class="com.huateng.hstserver.communicate.mina.comm.common.filter.protocolcodec.comm.HeadPadLenPackageCodecFactory">
      	<!-- 指定长度域长度，默认值为5 -->
      	<constructor-arg type="int" index="0">
			<value>5</value>
		</constructor-arg>
		<!-- 指定长度域类型，"N"-number string, "BCD"-number string with bcd compress, "Bi"-binary data，默认值为"N" -->
		<constructor-arg type="java.lang.String" index="1">
			<value>N</value>
		</constructor-arg>
		<!-- 指定是否包含长度域，默认为不包含 -->
		<constructor-arg type="boolean" index="2">
			<value>false</value>
		</constructor-arg>
      </bean>
    </constructor-arg>
  </bean>
  
  
  
  
  <!-- 报文处理协议过滤器-->
  <bean id="headPadLenCommPackProc" class="com.huateng.hstserver.communicate.mina.comm.common.filter.protocolcodec.comm.HeadPadLenCommPackProc">
		<property name="lenFieldType">
			<value>N</value>
		</property>
		<property name="lenFieldLen">
			<value>5</value>
		</property>
		<property name="includeLenField">
			<value>false</value>
		</property>
  </bean>
  
  
  <bean id="sampleAppObjectProcessor" class="com.huateng.hstserver.communicate.mina.comm.common.filter.protocolcodec.app.sample.SampleAppObjectProcessor"/>
  
  <bean id="bizAppObjectProcessor" class="com.huateng.hstserver.communicate.mina.comm.common.filter.protocolcodec.app.biz.BizAppObjectProcessor"/>
  
  <bean id="packageDecoder" class="com.huateng.hstserver.communicate.mina.comm.common.filter.protocolcodec.PackageDecoder">
		<property name="commPackageProcessor" ref="headPadLenCommPackProc"/>
		<property name="objMsgProcessor" ref="bizAppObjectProcessor"/>
		
  </bean>
  
  <bean id="packageEncoder" class="com.huateng.hstserver.communicate.mina.comm.common.filter.protocolcodec.PackageEncoder">
		<property name="commPackageProcessor" ref="headPadLenCommPackProc"/>
		<property name="objMsgProcessor" ref="bizAppObjectProcessor"/>
  </bean>
  
  
  
  <bean id="packageCodecFilter" class="org.apache.mina.filter.codec.ProtocolCodecFilter">
    <constructor-arg>
      <bean class="com.huateng.hstserver.communicate.mina.comm.common.filter.protocolcodec.PackageCodecFactory">
      	
      	<constructor-arg ref="packageDecoder"/>
		
		<constructor-arg ref="packageEncoder"/>
      </bean>
    </constructor-arg>
  </bean>
  <!-- package codec end -->
  
  
  	<bean id="appCodecFilter"
	   class="com.huateng.hstserver.communicate.mina.comm.common.filter.protocolcodec.app.AppCodecFilter">
	   <property name="processor">
			<bean class="com.huateng.hstserver.communicate.mina.comm.common.filter.protocolcodec.app.sample.SampleAppObjectProcessor">
			</bean>
	   </property>
	</bean> 
  
	 <bean id="mdcInjectionFilter"
	  		class="org.apache.mina.filter.logging.MdcInjectionFilter">
	</bean> 
	
	<!-- 日志过滤器，提供往来报文长度和报文内容打印，此过滤器应配置在成帧过滤器之后 -->
	<bean id="packLogFilter"
	   class="com.huateng.hstserver.communicate.mina.comm.common.filter.logging.PackLogFilter">
	   <property name="messGetter">
			<bean class="com.huateng.hstserver.communicate.mina.comm.common.filter.logging.LogMessGetterImpl">
				<!-- 指定报文内容输出类型，"HEX"-十六进制字符串方式输出报文内容, "STR"-直接以字符串方式输出报文内容 -->
				<property name="outMessType" value="HEX"/>
			</bean>
	   </property>
	</bean> 
	 	
	 	<!-- keepalive过滤器，建议配置于成帧过滤器后，以便于心跳包的组包工作 ，连接超时后可实现自己的KeepAliveRequestTimeoutHandler接口，默认超时实现为继续发送-->
	<bean id="keepAliveFilter"
	  		class="com.huateng.hstserver.communicate.mina.comm.common.filter.connectmaintain.keepalive.KeepAliveFilter">
	  		<!-- keepalive 消息工厂，应该用实际应用协议所对应的keepalive消息工厂代替 -->
	  	<constructor-arg>
			<bean class="com.huateng.hstserver.communicate.mina.comm.common.filter.connectmaintain.BizHeartBeatMessageFactory"/>
		</constructor-arg>
		<!-- 首次进行链路IDLE处理的IDLE时间间隔 -->
		<property name="requestInterval" value="30"></property>
		<!-- 链路探测包重复发送的IDLE间隔 -->
		<property name="requestTimeout" value="60"></property>
		<!-- 链路探测包在无响应情况下重复发送次数，为0时，代表链路IDLE后直接进行链路IDLE处理，为1代表只发送一次 链路探测包-->
		<property name="resendTimes" value="1"></property>
	</bean> 
	
	
	<!-- 简单的连接idle后连接断开过滤器，不应与keepalivefilter同时使用 -->
	<bean id="justCloseWhileIdle" class="com.huateng.hstserver.communicate.mina.comm.common.filter.connectmaintain.JustCloseWhileIdle">
		<property name="sessionTimeOutTimeSec" value="600"/>
	</bean> 
	
  
  <!-- 配置filter链，示例以全过滤器链为例，使用时可根据实际需要删减-->
  <bean id="filterChainBuilder" class="org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder">
    <property name="filters">
		<map>
            <entry key="executor" value-ref="executorFilter"/>            
<!--            <entry key="mdc" value-ref="mdcInjectionFilter"/>-->			
			<entry key="codec" value-ref="packageCodecFilter"/>			
            <entry key="logging" value-ref="packLogFilter"/>                 
<!--            <entry key="justCloseWhileIdle" value-ref="justCloseWhileIdle"/>-->            
<!--            <entry key="keepAlive" value-ref="keepAliveFilter"></entry>-->            
<!--            <entry key="appCodec" value-ref="appCodecFilter"/>-->
            
		</map>
    </property>
  </bean>
 
   <!-- 配置服务器filter链 -->
  <bean id="filterChainBuilderServer" class="org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder">
    <property name="filters">
		<map>
            <entry key="executor" value-ref="executorFilter"/>			
			<entry key="codec" value-ref="packageCodecFilter"/>			
            <entry key="logging" value-ref="packLogFilter"/>
		</map>
    </property>
  </bean>
   
  <!-- 配置自己的业务handler，此处仅为示例-->
  <bean id="huatengHandler" class="com.huateng.hstserver.communicate.mina.common.HuatengServerHandler"></bean>
  <bean id="semaphoreServerHandler" class="com.huateng.hstserver.communicate.mina.common.SemaphoreServerHandler"></bean>
  
  <!-- 通信服务器端配置-->
<!--  <bean id="ioAcceptor" class="org.apache.mina.transport.socket.nio.NioSocketAcceptor" init-method="bind" destroy-method="unbind">-->
  <bean id="ioAcceptor" class="org.apache.mina.transport.socket.nio.NioSocketAcceptor">
    <property name="defaultLocalAddress" value=":6002" />
    <property name="handler" ref="semaphoreServerHandler" />
    <property name="reuseAddress" value="true" />
    <property name="filterChainBuilder" ref="filterChainBuilderServer" />
  </bean>
  
  
  <!-- 连接托管异步通信客户端配置 -->
  <!-- 默认为长连接，如果需要强制修改为短连接，请查看构造函数参数说明-->
  <bean id="managedAsynClient" class="com.huateng.hstserver.communicate.mina.comm.server.client.ManagedAsynClient">
  	<property name="connector" ref="ioConnectorAsyn"></property>
  </bean>
  
  <bean id="ioConnectorAsyn" class="org.apache.mina.transport.socket.nio.NioSocketConnector">
    <!-- <property name="defaultLocalAddress" value=":${listenport}" /> -->
    <property name="handler" ref="managedAsynClientCoordinateHandler" />
    <!-- <property name="reuseAddress" value="false" />  -->
    <property name="filterChainBuilder" ref="filterChainBuilder" />
  </bean>
  
  <bean id="managedAsynClientCoordinateHandler" class="com.huateng.hstserver.communicate.mina.comm.server.client.ManagedAsynClientCoordinateHandler">
		<property name="managedAsynClient" ref="managedAsynClient"></property>  
  </bean>
  <!--  -->
  
  <!-- 连接托管同步通信客户端配置 -->
  <!-- 默认为短连接，如果需要强制修改为长连接，请查看构造函数参数说明-->
  <bean id="managedSynClient" class="com.huateng.hstserver.communicate.mina.comm.server.client.ManagedSynClient">
  	<property name="connector" ref="ioConnectorSyn"></property>
  </bean>
  
  <bean id="ioConnectorSyn" class="org.apache.mina.transport.socket.nio.NioSocketConnector">
    <!-- <property name="defaultLocalAddress" value=":${listenport}" /> -->
    <property name="handler" ref="managedSynClientCoordinateHandler" />
    <!-- <property name="reuseAddress" value="false" />  -->
    <property name="filterChainBuilder" ref="filterChainBuilder" />
  </bean>
  
  <bean id="managedSynClientCoordinateHandler" class="com.huateng.hstserver.communicate.mina.comm.server.client.ManagedSynClientCoordinateHandler">
		<property name="managedSyncClient" ref="managedSynClient"></property>  
  </bean>
  <!--  -->
  
  
  <!-- 连接托管异步转同步通信客户端配置 -->
  <!-- 默认为长连接，如果需要强制修改为短连接，请查看构造函数参数说明-->
  <bean id="managedAsyn2SynClient" class="com.huateng.hstserver.communicate.mina.comm.server.client.ManagedAsyn2SynClient">
  </bean>
  
  <bean id="connectionProcessor" class="com.huateng.hstserver.communicate.mina.comm.common.connection.ConnectionProcessor">
  	<property name="connector" ref="ioConnectorAsyn2Syn"></property>
  </bean>
    
  <bean id="ioConnectorAsyn2Syn" class="org.apache.mina.transport.socket.nio.NioSocketConnector">    
    <property name="handler" ref="managedAsyn2SynClientCoordinateHandler" />    
    <property name="filterChainBuilder" ref="filterChainBuilder" />
  </bean>
  
  <bean id="managedAsyn2SynClientCoordinateHandler" class="com.huateng.hstserver.communicate.mina.comm.server.client.ManagedAsyn2SynClientCoordinateHandler">
		<property name="managedAsyn2SynClient" ref="managedAsyn2SynClient"></property>  
  </bean>
  <!--  -->  
</beans>