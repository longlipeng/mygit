package com.huateng.hstserver.communicate.mina.main;


import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;

import org.apache.log4j.Logger;

import com.huateng.hstserver.communicate.mina.comm.common.DataTrans.DataTransTools;
import com.huateng.hstserver.communicate.mina.comm.common.DataTrans.Exception.NotHexStringException;



public class RSATest {
	private static Logger logger = Logger.getLogger(RSATest.class);
	/*public static void main(String[] argv) throws NoSuchAlgorithmException, NotHexStringException, CertificateException, InvalidKeyException, SignatureException
	{
		//����
		String rsMiwen = "C1BA397311A3CE7E81A3C52110BF27376CE1A2732E42662505704698F36C51BA9BD782AB243FEC673EF9657EE7718E4C1A6686E5C173DDF88330FEB613E64642EC0872F674CCD092A874ECA7FF61FDFEB035584788AF3108DA55EA140C09F96B62329DB2D282FCF471924722F7D7D7D7F2F3118FB78719C92C3C5E2A3C558572";
		//����
		String mw =      "88800095722000120171004000420295611021207905561000000SUCCESSRSADODIRECTPAYMENT000150000138****1232201102120790556120171004113250SUCCESS"; 
		//֤��
		String hexpb

		byte[] pu = DataTransTools.hexStringToByte(hexpb);
		InputStream bais = new ByteArrayInputStream(pu);
		CertificateFactory cf   =   CertificateFactory.getInstance("X.509"); 
		X509Certificate   cert   =   (X509Certificate)cf.generateCertificate(bais); 
		PublicKey publicKey = cert.getPublicKey();

		Signature s = Signature.getInstance("MD5WithRSA");
//		Signature s = Signature.getInstance("RSA");
		s.initVerify(publicKey);
		s.update(mw.getBytes());
		System.out.print(s.verify(DataTransTools.hexStringToByte(rsMiwen)));

	}*/
	
	
	public static void main1(String[] argv) throws NotHexStringException, InvalidKeySpecException, NoSuchAlgorithmException, InvalidKeyException
	{
		String hexKeyString
		
		byte[] keyBytes = DataTransTools.hexStringToByte
		
		String keydata = new String(keyBytes);
		
		logger.info(keydata);
		
		byte[] hexKeyBytes = hexKeyString.getBytes();
		
		
		
		String sampleBase64Key = "M2lbqYiz1M4rrqjDwnT1B+NXEIHS34w9CuvwyQn4ILlariQgpCdrut44VZ+1jXQAJv8i3MWZHYwQgJTQZ+ZpJ7DJJRWisP6QV9tNux3DqMsnCnwFrJewaLqWdcnibGTAwAr6wKF+A3G/uWGEqg4rkndLGuYIh8P5Whn+RBSYDjyJzgh+C3PwLUDDqWHERpwrFd8bhMbFwzmoDV6G1WzvRG5BmYX8XK+eUqCwzcrje9ik7UL5oSRCgT/tRGdShKqgQzGc1071drA0G2ExdqfQThJ0oP747dF+KPOrV+/NgRC5YFfHP4hn6s7rUs0wopEyaV2H87dqfmNVzsEGIYL30Q==";
	/*	byte[] sampleBase64KeyBytes = 
		
		
		   // ����X509EncodedKeySpec����     
	       X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);
//		X509EncodedKeySpec keySpec = new X509EncodedKeySpec(hexKeyBytes);  
	   
	       // KEY_ALGORITHM ָ���ļ����㷨     
	       KeyFactory keyFactory = KeyFactory.getInstance("RSA");     
	  
	      // ȡ��Կ�׶���     
	      PublicKey pubKey = keyFactory.generatePublic(keySpec);     
	  
	      Signature signature = Signature.getInstance("MD5WithRSA");     
	      signature.initVerify(pubKey);     
//	     signature.update(data);     
	  
		*/
		logger.info(keydata);
		
	}
	
	
	public static boolean verify(byte[] data, String publicKey, String sign)      
	           throws Exception {     
			
		
		   
		  
		
	      // ������base64����Ĺ�Կ     
	       byte[] keyBytes = publicKey.getBytes();     
	   
	       // ����X509EncodedKeySpec����     
	       X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);     
	   
	       // KEY_ALGORITHM ָ���ļ����㷨     
	       KeyFactory keyFactory = KeyFactory.getInstance("RSA");     
	  
	      // ȡ��Կ�׶���     
	      PublicKey pubKey = keyFactory.generatePublic(keySpec);     
	  
	      Signature signature = Signature.getInstance("MD5WithRSA");     
	      signature.initVerify(pubKey);     
	     signature.update(data);     
	     
	     return false;
	     
	      // ��֤ǩ���Ƿ���     
//	      return signature.verify(decryptBASE64(sign));     
	      
	      /*
	      byte[] pu =hexStrToBytes(pubkey);

			X509EncodedKeySpec keySpec = new X509EncodedKeySpec(pu);
				KeyFactory factory = KeyFactory.getInstance("RSA");
			PublicKey publicKey = factory.generatePublic(keySpec);
			// ��ȡ����
			Signature s = Signature.getInstance("MD5WithRSA");
			// ��ʼ��
			s.initVerify(publicKey);
			// ����ԭʼ���
			s.update(dataString.getBytes());
			
			flag = s.verify(hexStrToBytes(signedString));
	      */
	   }      


}
